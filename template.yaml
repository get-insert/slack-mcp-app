AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Slack MCP Server - AWS Lambda deployment

Transform:
- AWS::Serverless-2016-10-31

Parameters:
  SlackClientId:
    Type: String
    Description: Slack OAuth Client ID
    NoEcho: true
  SlackClientSecret:
    Type: String
    Description: Slack OAuth Client Secret
    NoEcho: true
  SlackSigningSecret:
    Type: String
    Description: Slack Signing Secret for request verification
    NoEcho: true
  SlackBotToken:
    Type: String
    Description: Slack Bot Token for MCP Client
    NoEcho: true
  OpenAIApiKey:
    Type: String
    Description: OpenAI API Key
    NoEcho: true

Resources:
  SlackInstallationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-slack-installations"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: teamId
          AttributeType: S
        - AttributeName: installedAt
          AttributeType: S
      KeySchema:
        - AttributeName: teamId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: teamId-installedAt-index
          KeySchema:
            - AttributeName: teamId
              KeyType: HASH
            - AttributeName: installedAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  SlackMCPServerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/mcp-server/lambda-entry.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      MemorySize: 512
      Timeout: 20
      Description: Slack MCP Server for AI assistant integration
      Environment:
        Variables:
          SLACK_CLIENT_ID: !Ref SlackClientId
          SLACK_CLIENT_SECRET: !Ref SlackClientSecret
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
          DOMAIN: !Sub "https://${AWS::StackName}-api.execute-api.${AWS::Region}.amazonaws.com/Prod"
          MODE: http
          DYNAMODB_TABLE_NAME: !Ref SlackInstallationsTable
          DYNAMODB_ENDPOINT: ""
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SlackInstallationsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY

  SlackMCPClientFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/mcp-client/lambda-entry.handler
      Runtime: nodejs20.x
      Architectures:
        - arm64
      MemorySize: 512
      Timeout: 30
      Description: Slack MCP Client for webhook processing
      Environment:
        Variables:
          SLACK_BOT_TOKEN: !Ref SlackBotToken
          SLACK_SIGNING_SECRET: !Ref SlackSigningSecret
          OPENAI_API_KEY: !Ref OpenAIApiKey
          OPENAI_MODEL: gpt-4o
          OPENAI_MAX_TOKENS: 4096
          MCP_SERVER_URL: !Sub "https://${AWS::StackName}-api.execute-api.${AWS::Region}.amazonaws.com/Prod/mcp"
      Events:
        SlackEvents:
          Type: Api
          Properties:
            Path: /slack/events
            Method: POST

Outputs:
  SlackMCPServerEndpoint:
    Description: "API Gateway endpoint URL for Slack MCP Server"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${AWS::StackName}-SlackMCPServerEndpoint"
  
  SlackMCPClientEndpoint:
    Description: "API Gateway endpoint URL for Slack MCP Client webhook"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/slack/events"
    Export:
      Name: !Sub "${AWS::StackName}-SlackMCPClientEndpoint"
